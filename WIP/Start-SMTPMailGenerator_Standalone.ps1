#Requires -Version 3.0
Function _GenerateMessageContent
{
	[CmdletBinding()]
	Param(
		[Parameter(Mandatory = $true)]
		[bool]$subject,
		
		[Parameter(Mandatory = $true)]
		$wordPool,
		
		[Parameter(Mandatory = $true)]
		[int]$minLength,
		
		[Parameter(Mandatory = $true)]
		[int]$maxLength
	)
	
	$wordCount = $wordPool.Count
	$lineLength = Get-Random -Minimum $minLength -Maximum $maxLength
	[string]$content = ""

	$i = 0
	do {
		$rand = Get-Random -Minimum 0 -Maximum ($wordCount - 1)

		If($subject){$line = ($wordPool.GetValue($rand)).Word}
		Else{$line = ($wordPool.GetValue($rand))}
		$content = $line + " " + $content
		$i++
	}
	while ($i -lt $lineLength)

	# Capitalise the first character if subject
	If($subject){$content = $content.substring(0,1).ToUpper()+$content.substring(1)}
	
	return $content
}


Function Start-SMTPMailGenerator
{
	[CmdletBinding()]
	Param(
		[Parameter(Mandatory = $true,
		HelpMessage = "Specify the single recipient primary email address",
		ValueFromPipeline = $true,
		ValueFromPipelineByPropertyName = $true)]
		[string]$Recipient,
		
		[Parameter(Mandatory = $true,
		HelpMessage = "Specify the address that appear as the sender.  Authentication will be required",
		ValueFromPipeline = $true,
		ValueFromPipelineByPropertyName = $true)]
		[string]$Sender,
		
		[Parameter(Mandatory = $false,
		HelpMessage = "Specify how many messages to send",
		ValueFromPipeline = $true,
		ValueFromPipelineByPropertyName = $true)]
		[int]$SendCount = 1,
		
		[Parameter(Mandatory = $false,
		HelpMessage = "Specify the SMTP server address to use",
		ValueFromPipeline = $true,
		ValueFromPipelineByPropertyName = $true)]
		[string]$SMTPServer = "localhost",
		
		[Parameter(Mandatory = $false,
		ValueFromPipeline = $false,
		HelpMessage = "Deprecated parameter. Please update all functions.")]
		[string]$CredentialFile,

        [Parameter(Mandatory = $false, 
		ValueFromPipeline = $false,
        HelpMessage = "Specify the SMTP server credentials, if needed.")]
        [PSCredential]$Credentials,
		
		[Parameter(Mandatory = $false,
		ValueFromPipeline = $false,
		HelpMessage = "Specify the TCP port to use. It will default to 25.")]
		[int]$Port = 25,
		
		[Parameter(Mandatory = $false,
		ValueFromPipeline = $false,
		HelpMessage = "Specify if forced TLS is needed. It will default to no.")]
		[switch]$UseTLS
	)

	begin {
		if ($null -ne $CredentialFile) {
			Write-Host "The CredentialFile parameter has been deprecated. Please update the parameters and try again."

			Exit
		}

		#Subject words
		Write-Host "Exporting temporary subject line file"
		[System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($EncodedSubjectText)) | Out-File -Encoding "ASCII" -FilePath $env:temp\subject.csv
		$SubjectWords = Import-Csv -Path $env:temp\subject.csv

		#Body words
		Write-Host "Exporting temporary body content file"
		[System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($EncodedBodyText)) | Out-File -Encoding "ASCII" -FilePath $env:temp\body.txt
		$BodyWords = Get-Content -Path $env:temp\body.txt

		#Attachment
		Write-Host "Exporting temporary attachment file"
		$AttachmentContent = [System.Convert]::FromBase64String($EncodedAttachment)
		Set-Content -Path $env:temp\attachment.doc -Value $AttachmentContent -Encoding Byte
	}
	
	process {
		Write-Host "Starting SMTP Email generation"
		
		# Send all the emails
		$intSent = 0
		do {
			$strMessageSubject = _GenerateMessageContent $True $SubjectWords 5 20
			$strMessageBody = _GenerateMessageContent $False $BodyWords 5 50
			if((Get-Random -Minimum 0 -Maximum 100) -ge 50) {$includeAttachment = $true}
			else {$includeAttachment = $false}

			$pct = $intSent/$SendCount * 100
			Write-Progress -Activity "Sending $SendCount emails" -Status "$intSent of $sendcount - Email from $sender to $recipient" -PercentComplete $pct
			
			if ($UseTLS) {
				[System.Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
				
				if ($CredentialFile) {
					if($includeAttachment) {
						Send-MailMessage -Credential $ExchangeCredentials -UseSsl -Port $Port -To $Recipient -From $Sender -Subject $strMessageSubject -Body $strMessageBody `
							-Attachment $env:temp\attachment.doc -SmtpServer $SMTPServer -DeliveryNotificationOption OnSuccess,OnFailure
					} else {
						Send-MailMessage -Credential $ExchangeCredentials -UseSsl -Port $Port -To $Recipient -From $Sender -Subject $strMessageSubject -Body $strMessageBody `
							-SmtpServer $SMTPServer -DeliveryNotificationOption OnSuccess,OnFailure
					}#if/else
				} else {
					if($includeAttachment) {
						Send-MailMessage -UseSsl -Port $Port -To $Recipient -From $Sender -Subject $strMessageSubject -Body $strMessageBody `
							-Attachment $env:temp\attachment.doc -SmtpServer $SMTPServer -DeliveryNotificationOption OnSuccess,OnFailure
					} else {
						Send-MailMessage -UseSsl -Port $Port -To $Recipient -From $Sender -Subject $strMessageSubject -Body $strMessageBody `
							-SmtpServer $SMTPServer -DeliveryNotificationOption OnSuccess,OnFailure
					}#if/else
				}#if/else
			} else {
				if($includeAttachment) {
					Send-MailMessage -Port $Port -To $Recipient -From $Sender -Subject $strMessageSubject -Body $strMessageBody `
						-Attachment $env:temp\attachment.doc -SmtpServer $SMTPServer -DeliveryNotificationOption OnSuccess,OnFailure
				} else {
					Send-MailMessage -Port $Port -To $Recipient -From $Sender -Subject $strMessageSubject -Body $strMessageBody `
						-SmtpServer $SMTPServer -DeliveryNotificationOption OnSuccess,OnFailure
				}#if/else			
			}#if/else

			$intSent++
		} until ($intSent -eq $SendCount)
		Write-Host "Finished sending $SendCount emails"

	}#process

	end {
		Remove-Item $env:temp\subject.csv
		Remove-Item $env:temp\body.txt
		Remove-Item $env:temp\attachment.doc
	} #end
} #function

#Encoded sample texts
$EncodedSubjectText = ""
$EncodedBodyText = ""
$EncodedAttachment = ""

Export-ModuleMember -Function Start-SMTPMailGenerator;